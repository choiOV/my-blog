---
import { getCollection } from "astro:content";
import Main from "@/layouts/Main.astro";
import Layout from "@/layouts/Layout.astro";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import Card from "@/components/Card.astro";
import getPostsByGroupCondition from "@/utils/getPostsByGroupCondition";
import { SITE } from "@/config";

// Redirect to 404 page if `showArchives` config is false
if (!SITE.showArchives) {
  return Astro.redirect("/404");
}

const posts = await getCollection("blog", ({ data }) => !data.draft);
const projects = await getCollection("projects", ({ data }) => !data.draft);
const books = await getCollection("books", ({ data }) => !data.draft);

const typedPosts = posts.map(p => ({
  ...p,
  data: { ...p.data, _type: "blog" },
}));
const typedProjects = projects.map(p => ({
  ...p,
  data: { ...p.data, _type: "project" },
}));
const typedBooks = books.map(p => ({
  ...p,
  data: { ...p.data, _type: "book" },
}));

const combinedItems = [...typedPosts, ...typedProjects, ...typedBooks];

const sorted = combinedItems.sort(
  (a, b) =>
    new Date(b.data.pubDatetime).getTime() -
    new Date(a.data.pubDatetime).getTime()
);

const groupedByYear = getPostsByGroupCondition(sorted, item =>
  new Date(item.data.pubDatetime).getFullYear()
);

const months = [
  "1월",
  "2월",
  "3월",
  "4월",
  "5월",
  "6월",
  "7월",
  "8월",
  "9월",
  "10월",
  "11월",
  "12월",
];
---

<Layout title={`아카이브 | ${SITE.title}`}>
  <Header />
  <Main
    pageTitle="아카이브"
    pageDesc="블로그의 글을 한 눈에 확인할 수 있습니다."
  >
    {
      Object.entries(groupedByYear)
        .sort(([a], [b]) => Number(b) - Number(a))
        .map(([year, yearGroup]) => {
          const groupedByMonth = getPostsByGroupCondition(
            yearGroup,
            item => new Date(item.data.pubDatetime).getMonth() + 1
          );

          return (
            <div>
              <h2 class="mt-10 text-2xl font-bold">{year}</h2>
              {Object.entries(groupedByMonth)
                .sort(([a], [b]) => Number(b) - Number(a))
                .map(([month, monthGroup]) => (
                  <div class="flex flex-col sm:flex-row">
                    <div class="mt-6 min-w-36 text-lg sm:my-6">
                      <span class="font-bold">{months[Number(month) - 1]}</span>
                      <sup class="text-xs">{monthGroup.length}</sup>
                    </div>
                    <ul>
                      {monthGroup.map(item => (
                        <Card entry={item} />
                      ))}
                    </ul>
                  </div>
                ))}
            </div>
          );
        })
    }
  </Main>
  <Footer />
</Layout>
